#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_SendLightContract.headers.fc";
#include "tact_SendLightContract.stdlib.fc";
#include "tact_SendLightContract.constants.fc";
#include "tact_SendLightContract.storage.fc";

;;
;; Contract SendLightContract functions
;;

tuple $SendLightContract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract SendLightContract
;;

((tuple), ()) %$SendLightContract$_internal_empty(tuple $self) impure inline {
    var $self = $self;
    __tact_debug_str(__gen_slice_string_b6ce1607af52c7e5950a1fbbc5f46209506d0f0726a587d6ad71010381288973(), "[DEBUG] File contracts/send_light_contract.tact:15:9");
    return ($self, ());
}

((tuple), ()) $SendLightContract$_internal_binary_SendTon(tuple $self, (int) $msg) impure inline {
    var $self = $self;
    var ($msg'amountTon) = $msg;
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__gen_slice_address_ad6ca21f706f0cf960c73517223e28759896805c10f7459ae87ec85d30cc4302(), true, ($msg'amountTon + 400000), 2));
    return ($self, ());
}

((tuple), ()) $SendLightContract$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$SendLightContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract SendLightContract
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmeopRfPGLEH6LxYutx81CD3PHbePABbNfVTz3Mdjx6N5m";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SendLightContract
;;

(tuple, int) $SendLightContract$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$SendLightContract$_internal_empty();
        return (self, true);
    }
    
    ;; Receive SendTon message
    if (op == 1839674019) {
        var msg = in_msg~$SendTon$_load();
        self~$SendLightContract$_internal_binary_SendTon(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SendLightContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SendLightContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SendLightContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SendLightContract$_contract_store(self);
}
